//
//  DataSourceData.swift
//  GatheredKit
//
//  Created by Joseph Duffy on 03/02/2017.
//  Copyright Â© 2017 Joseph Duffy. All rights reserved.
//

import Foundation

/**
 An implementation of `TypedDataSourceDataProtocol` that is type-safe by using generics
 */
public struct TypedDataSourceData<ValueType: Any>: TypedDataSourceDataProtocol {

    /// A user-friendly name for the data source
    public let displayName: String

    /// The value of the data
    public var value: ValueType {
        return data.value
    }

    /// A human-friendly formatted value
    /// Note that this may differ from the result of `unit.formattedString(for:)`
    public var formattedValue: String?

    /// A unit of measurement for the data source's value
    public let unit: DataSourceDataUnit?

    /// The date that the value was recorded
    public var date: Date {
        return data.date
    }

    /// A private struct that stores the backing data to ensure that all 3 properties are set at once
    private var data: TypedDataSourceDataBackingData<ValueType>

    /**
     Create a new `TypedDataSourceDataProtocol`

     - parameter displayName: A user-friendly name for the data source
     - parameter value: The value of the data
     - parameter formattedValue: A human-friendly formatted value
     - parameter unit: A unit of measurement for the data source's value
     - parameter date: The date that the value was recorded
     */
    public init(displayName: String, value: ValueType, formattedValue: String?, unit: DataSourceDataUnit?, date: Date) {
        self.displayName = displayName
        self.data = TypedDataSourceDataBackingData(value: value, formattedValue: formattedValue, date: date)
        self.formattedValue = formattedValue
        self.unit = unit
    }

    /**
     Updates the data backing this `TypedDataSourceDataProtocol`

     - parameter value: The new value of the data
     - parameter formattedValue: The new human-friendly formatted value
     - parameter date: The date the `value` was recorded
     */
    public mutating func updateData(value: ValueType, formattedValue: String?, date: Date) {
        data = TypedDataSourceDataBackingData(value: value, formattedValue: formattedValue, date: date)
    }
    
}

/**
 A private struct that's utilised by `TypedDataSourceData` to ensure that all data values are updated at once
 */
private struct TypedDataSourceDataBackingData<ValueType: Any> {

    /// The value of the data
    let value: ValueType

    /// A human-friendly formatted value
    let formattedValue: String?

    /// The date that the value was recorded
    let date: Date

    /**
     Create a new `TypedDataSourceDataBackingData`
     
     - parameter value: The new value of the data
     - parameter formattedValue: The new human-friendly formatted value
     - parameter date: The date the `value` was recorded
     */
    init(value: ValueType, formattedValue: String?, date: Date) {
        self.value = value
        self.formattedValue = formattedValue
        self.date = date
    }

}

/**
 A piece of data generated by a `DataSource`. This protocol is the base for `TypedDataSourceDataProtocol` and
 is used as a non-generic type that can be used where generics are not available, such as arrays
 */
public protocol DataSourceData {

    /// A user-friendly name for the data source
    var displayName: String { get }

    /// The raw value of the data
    var rawValue: Any? { get }

    /// A human-friendly formatted value
    /// Note that this may differ from the result of `unit.formattedString(for:)`
    var formattedValue: String? { get }

    /// A unit of measurement for the data source's value
    var unit: DataSourceDataUnit? { get }

    /// The date that the value was recorded
    var date: Date { get }

}

/**
 An protocol that inherits `DataSourceData` to add a type-safe the `value` property and associated methods
 */
public protocol TypedDataSourceDataProtocol: DataSourceData {

    /// The type of the stored data
    associatedtype ValueType

    /// The value of the data
    var value: ValueType { get }

    /**
     Create a new `TypedDataSourceDataProtocol`

     - parameter displayName: A user-friendly name for the data source
     - parameter value: The value of the data
     - parameter formattedValue: A human-friendly formatted value
     - parameter unit: A unit of measurement for the data source's value
     - parameter date: The date that the value was recorded
     */
    init(displayName: String, value: ValueType, formattedValue: String?, unit: DataSourceDataUnit?, date: Date)

    /**
     Updates the data backing this `TypedDataSourceDataProtocol`
     
     - parameter value: The new value of the data
     - parameter formattedValue: The new human-friendly formatted value
     - parameter date: The date the `value` was recorded
    */
    mutating func updateData(value: ValueType, formattedValue: String?, date: Date)

}

/**
 An extension to provide methods with default parameters for various `TypedDataSourceDataProtocol` methods
 */
public extension TypedDataSourceDataProtocol {

    /**
     Create a new `TypedDataSourceDataProtocol`

     - parameter displayName: A user-friendly name for the data source
     - parameter value: The value of the data
     - parameter formattedValue: A human-friendly formatted value. Default is `nil`
     - parameter unit: A unit of measurement for the data source's value. Default is `nil`
     - parameter date: The date that the value was recorded. Default is `Date()` (the current date and time)
     */
    init(displayName: String, value: ValueType, formattedValue: String? = nil, unit: DataSourceDataUnit? = nil, date: Date = Date()) {
        self.init(displayName: displayName, value: value, formattedValue: formattedValue, unit: unit, date: date)
    }

    /**
     Updates the data backing this `TypedDataSourceDataProtocol`

     - parameter value: The new value of the data
     - parameter formattedValue: The new human-friendly formatted value. Default is `nil`
     - parameter date: The date the `value` was recorded. Default is `Date()` (the current date and time)
     */
    public mutating func updateData(value: ValueType, formattedValue: String? = nil, date: Date = Date()) {
        updateData(value: value, formattedValue: formattedValue, date: date)
    }

}

// MARK:- Extensions

public extension TypedDataSourceDataProtocol {

    /// The raw value of the data
    public var rawValue: Any? {
        return value
    }

}
